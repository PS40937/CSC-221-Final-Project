Download pygame through a command line interface
pip install pygame

Import Needed Libraries:
pygame
time
random

Initialize Pygame:
  pygame.init()

Define colors using RGB Tuples (5 used in initial design. Examples below
  white = (255, 255, 255)
  Black = (0, 0, 0)
  Red = (253, 39, 3)

Define Window Dimensions by stating pixel count in height and width
  width = 600
  height = 400

Initialize the game window/screen
  win = pygame.display.set_mode((width, height))

Set the Game Title
  pygame.display.set_caption("")

Define the Clock for the game (controls the speed of the snake), the game is not timed
  clock = pygame.time.Clock()

Define Font Styles for display and messaging
  font_style
  score_font

Define Snake Function
  For each block in snake_list:
  Begin with a black rectangle at a random spot with snake_block

Define your_score(score)
  Display score at top left of screen
  Generate message using the defined score_font

Define messaging on screen
  Display message near the center of the screen (defined with height and width)
  Generate message using the defined font_style

Define the Game Loop (When the game ends)
  Set game_over = False
  Set game_cose = False

Initialize snake head position (x, y) 
  x = vertical 
  y = horizontal
  Initialize direction of snakes movement (dx = 0, dy = 0)

Define the snake by initializing snake_list
Define initial size of the snake

Generate random food_x & food_y - Ensuring it is aligned with the snake_block

Defining the game play:
  If the game is quit, set rule to game_over = True
  If game is not quit, follow user entry on directional arrows
    Left Arrow = -snake_block, dy = 0
    Right Arrow = snake_block, dy = 0
    Up Arrow = -snake_block, dx = 0
    Down Arrow = snake_block, dx = 0

The snake head will need to update with new coordinates once arrow key has been struck: x +=dx, y +=dy

Define end of game when snake hits wall/goes out of bounds:
  Set game_close = True

Set colors for window and objects:
  Fill window with white
  Draw a green rectangle at the designated food position

Create the initial snake_head [x, y]
Set Rule for snake length:
IF length (len) of snake_list is greater than length_of_snake:
  Delete the first element of the snake_list

Define what happens if the snake head touches any part of the snake body
  For all elements of the snake, except the last:
    IF segment = snake-head:
      Set game_close = True

Display the snake & score and allow for constant updating of both:
  CALL draw_snake(snake_block, snake_list)
    This generates the snake on the screen
  Call your_score(length_of_snake - 1)
    Displays the score.  As the snake starts with a single rectangle, we must subtract 1 from the scoring
  Updating the dispaly/window throughout the gameplay
    pygame.display.update

Define what happens when the snake touches (eats) the food:
  Generate new food_z, food_y on grid (in window)
  Increase the length of the snake by 1

Maintain control of the speed of the game using 
clock.tick(snake_speed)

To ensure a seamless end to the game we must define how the game closes:
pygame.quit() will shutdown the pygame library when the game ends
quit() will exit the program completely

Begin the game with:
  game_loop()
